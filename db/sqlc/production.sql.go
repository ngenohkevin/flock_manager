// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: production.sql

package db

import (
	"context"
)

const createProduction = `-- name: CreateProduction :one

INSERT INTO production (
                 production_id, eggs, dirty, wrong_shape, weak_shell, damaged, hatching_eggs
) VALUES (
           $1, $2, $3, $4, $5, $6, $7
) RETURNING id, production_id, eggs, dirty, wrong_shape, weak_shell, damaged, hatching_eggs, created_at
`

type CreateProductionParams struct {
	ProductionID int64 `json:"production_id"`
	Eggs         int64 `json:"eggs"`
	Dirty        int64 `json:"dirty"`
	WrongShape   int64 `json:"wrong_shape"`
	WeakShell    int64 `json:"weak_shell"`
	Damaged      int64 `json:"damaged"`
	HatchingEggs int64 `json:"hatching_eggs"`
}

func (q *Queries) CreateProduction(ctx context.Context, arg CreateProductionParams) (Production, error) {
	row := q.db.QueryRowContext(ctx, createProduction,
		arg.ProductionID,
		arg.Eggs,
		arg.Dirty,
		arg.WrongShape,
		arg.WeakShell,
		arg.Damaged,
		arg.HatchingEggs,
	)
	var i Production
	err := row.Scan(
		&i.ID,
		&i.ProductionID,
		&i.Eggs,
		&i.Dirty,
		&i.WrongShape,
		&i.WeakShell,
		&i.Damaged,
		&i.HatchingEggs,
		&i.CreatedAt,
	)
	return i, err
}

const getProduction = `-- name: GetProduction :one
SELECT id, production_id, eggs, dirty, wrong_shape, weak_shell, damaged, hatching_eggs, created_at FROM production
WHERE production_id = $1 LIMIT 1
`

func (q *Queries) GetProduction(ctx context.Context, productionID int64) (Production, error) {
	row := q.db.QueryRowContext(ctx, getProduction, productionID)
	var i Production
	err := row.Scan(
		&i.ID,
		&i.ProductionID,
		&i.Eggs,
		&i.Dirty,
		&i.WrongShape,
		&i.WeakShell,
		&i.Damaged,
		&i.HatchingEggs,
		&i.CreatedAt,
	)
	return i, err
}

const listProduction = `-- name: ListProduction :many
SELECT id, production_id, eggs, dirty, wrong_shape, weak_shell, damaged, hatching_eggs, created_at FROM production
WHERE production_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductionParams struct {
	ProductionID int64 `json:"production_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListProduction(ctx context.Context, arg ListProductionParams) ([]Production, error) {
	rows, err := q.db.QueryContext(ctx, listProduction, arg.ProductionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Production
	for rows.Next() {
		var i Production
		if err := rows.Scan(
			&i.ID,
			&i.ProductionID,
			&i.Eggs,
			&i.Dirty,
			&i.WrongShape,
			&i.WeakShell,
			&i.Damaged,
			&i.HatchingEggs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
