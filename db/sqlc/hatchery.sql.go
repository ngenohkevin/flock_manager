// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: hatchery.sql

package db

import (
	"context"
)

const createHatchery = `-- name: CreateHatchery :one
INSERT INTO hatchery(
                     production_id, infertile, early, middle, late, dead_chicks, alive_chicks
) VALUES (
          $1, $2, $3, $4, $5, $6, $7
         )
RETURNING id, production_id, infertile, early, middle, late, dead_chicks, alive_chicks, created_at
`

type CreateHatcheryParams struct {
	ProductionID int64 `json:"production_id"`
	Infertile    int64 `json:"infertile"`
	Early        int64 `json:"early"`
	Middle       int64 `json:"middle"`
	Late         int64 `json:"late"`
	DeadChicks   int64 `json:"dead_chicks"`
	AliveChicks  int64 `json:"alive_chicks"`
}

func (q *Queries) CreateHatchery(ctx context.Context, arg CreateHatcheryParams) (Hatchery, error) {
	row := q.db.QueryRowContext(ctx, createHatchery,
		arg.ProductionID,
		arg.Infertile,
		arg.Early,
		arg.Middle,
		arg.Late,
		arg.DeadChicks,
		arg.AliveChicks,
	)
	var i Hatchery
	err := row.Scan(
		&i.ID,
		&i.ProductionID,
		&i.Infertile,
		&i.Early,
		&i.Middle,
		&i.Late,
		&i.DeadChicks,
		&i.AliveChicks,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHatchery = `-- name: DeleteHatchery :exec
DELETE FROM hatchery
WHERE id = $1
`

func (q *Queries) DeleteHatchery(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHatchery, id)
	return err
}

const getHatchery = `-- name: GetHatchery :one
SELECT id, production_id, infertile, early, middle, late, dead_chicks, alive_chicks, created_at FROM hatchery
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHatchery(ctx context.Context, id int64) (Hatchery, error) {
	row := q.db.QueryRowContext(ctx, getHatchery, id)
	var i Hatchery
	err := row.Scan(
		&i.ID,
		&i.ProductionID,
		&i.Infertile,
		&i.Early,
		&i.Middle,
		&i.Late,
		&i.DeadChicks,
		&i.AliveChicks,
		&i.CreatedAt,
	)
	return i, err
}

const listHatchery = `-- name: ListHatchery :many
SELECT id, production_id, infertile, early, middle, late, dead_chicks, alive_chicks, created_at FROM hatchery
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListHatcheryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHatchery(ctx context.Context, arg ListHatcheryParams) ([]Hatchery, error) {
	rows, err := q.db.QueryContext(ctx, listHatchery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hatchery{}
	for rows.Next() {
		var i Hatchery
		if err := rows.Scan(
			&i.ID,
			&i.ProductionID,
			&i.Infertile,
			&i.Early,
			&i.Middle,
			&i.Late,
			&i.DeadChicks,
			&i.AliveChicks,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHatchery = `-- name: UpdateHatchery :one
UPDATE hatchery
SET infertile = $2,
    early = $3,
    middle = $4,
    late = $5,
    dead_chicks = $6,
    alive_chicks = $7
WHERE id = $1
RETURNING id, production_id, infertile, early, middle, late, dead_chicks, alive_chicks, created_at
`

type UpdateHatcheryParams struct {
	ID          int64 `json:"id"`
	Infertile   int64 `json:"infertile"`
	Early       int64 `json:"early"`
	Middle      int64 `json:"middle"`
	Late        int64 `json:"late"`
	DeadChicks  int64 `json:"dead_chicks"`
	AliveChicks int64 `json:"alive_chicks"`
}

func (q *Queries) UpdateHatchery(ctx context.Context, arg UpdateHatcheryParams) (Hatchery, error) {
	row := q.db.QueryRowContext(ctx, updateHatchery,
		arg.ID,
		arg.Infertile,
		arg.Early,
		arg.Middle,
		arg.Late,
		arg.DeadChicks,
		arg.AliveChicks,
	)
	var i Hatchery
	err := row.Scan(
		&i.ID,
		&i.ProductionID,
		&i.Infertile,
		&i.Early,
		&i.Middle,
		&i.Late,
		&i.DeadChicks,
		&i.AliveChicks,
		&i.CreatedAt,
	)
	return i, err
}
